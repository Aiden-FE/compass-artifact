import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-6067411a.js";const e={},p=t(`<h1 id="compass-aiden-utils" tabindex="-1"><a class="header-anchor" href="#compass-aiden-utils" aria-hidden="true">#</a> @compass-aiden/utils</h1><blockquote><p>Compass universal utils library</p></blockquote><h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting started</h2><p><code>npm install @compass-aiden/utils</code> Install dependencies</p><p>ESModule environment use:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">VERSION</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@compass-aiden/utils&#39;</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Current utils version is %s&#39;</span><span class="token punctuation">,</span> <span class="token constant">VERSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Commonjs environment use:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">VERSION</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;@compass-aiden/utils&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Current utils version is %s&#39;</span><span class="token punctuation">,</span> <span class="token constant">VERSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>UMD environment use:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/@compass-aiden/utils/dist/main.umd.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">VERSION</span> <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>CompassUtils<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Current utils version is %s&#39;</span><span class="token punctuation">,</span> <span class="token constant">VERSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="list-of-available-utils" tabindex="-1"><a class="header-anchor" href="#list-of-available-utils" aria-hidden="true">#</a> List of available utils</h2><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><h4 id="encodephonenumber" tabindex="-1"><a class="header-anchor" href="#encodephonenumber" aria-hidden="true">#</a> encodePhoneNumber</h4><p><strong>Version</strong>:</p><p>1.6.3</p><p><strong>Description</strong>:</p><p>Encrypted mobile phone number, desensitization processing</p><p><strong>Type</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">encodePhoneNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token doc-comment comment">/** Mobile phone number or international number */</span>
  phone<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token doc-comment comment">/** Configuration */</span>
  option<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@description</span> length of encrypted characters
     * <span class="token keyword">@default</span> 4
     */</span>
    encodeLength<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@description</span> The length of the offset to the right affects the distance of the encrypted block from the left.
     * <span class="token keyword">@default</span> 3
     */</span>
    offsetLength<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@description</span> Whether it is an international number
     * <span class="token keyword">@default</span> false
     */</span>
    isCountry<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@description</span> The separator after the international code, such as the separator of &#39;86 176&#39; is &#39; &#39;
     * <span class="token keyword">@default</span> &#39; &#39;
     */</span>
    countryAfterSymbol<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@description</span> Replacement characters for the mask
     * <span class="token keyword">@default</span> *
     */</span>
    maskChar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">encodePhoneNumber</span><span class="token punctuation">(</span><span class="token string">&#39;13533334444&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 135****4444</span>
<span class="token function">encodePhoneNumber</span><span class="token punctuation">(</span><span class="token string">&#39;+86 13533334444&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> isCountry<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; +86 135****4444</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="replacevariablesinstring" tabindex="-1"><a class="header-anchor" href="#replacevariablesinstring" aria-hidden="true">#</a> replaceVariablesInString</h4><p><strong>Version</strong>:</p><p>1.6.3</p><p><strong>Description</strong>:</p><p>Replace variables wrapped in a string</p><p><strong>Type</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">replaceVariablesInString</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token doc-comment comment">/** String template */</span>
  templateString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token doc-comment comment">/** Parameter object */</span>
  params<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;This is test {{ test }} string.&#39;</span><span class="token punctuation">;</span>
<span class="token function">replaceVariablesInString</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &#39;This is test hello string.&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h3><h4 id="promisetask" tabindex="-1"><a class="header-anchor" href="#promisetask" aria-hidden="true">#</a> promiseTask</h4><p><strong>Version</strong>:</p><p>1.6.3</p><p><strong>Description</strong>:</p><p>Asynchronous transaction processing, catching exceptions does not block the program.</p><p><strong>Type</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">promiseTask</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>Result <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> ExtraProperty <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token operator">=</span> object<span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span> asynchronous task
   */</span>
  promise<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Result<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span> Append the data attribute extra inside the attribute of the error message
   */</span>
  errorExt<span class="token operator">?</span><span class="token operator">:</span> ExtraProperty<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">(</span>Error <span class="token operator">&amp;</span> ExtraProperty<span class="token punctuation">)</span> <span class="token operator">|</span> Error <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> Result <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Return:</p><p>Return on Success<code>[null, Result]</code>,Return on failure<code>[(Error &amp; ExtraProperty) | Error, null]</code></p><p><strong>Example</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> asyncTask <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> asyncTask2 <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span> result<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">promiseTask</span><span class="token punctuation">(</span>asyncTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// handle error</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// handle result</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>error2<span class="token punctuation">,</span> result2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">promiseTask</span><span class="token punctuation">(</span>asyncTask2<span class="token punctuation">,</span> <span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token string">&#39;custom_error&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error2<span class="token operator">?.</span>code <span class="token operator">===</span> <span class="token string">&#39;custom_error&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// handle custom error</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>result2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// handle result</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="date" tabindex="-1"><a class="header-anchor" href="#date" aria-hidden="true">#</a> Date</h3><h4 id="formatdate" tabindex="-1"><a class="header-anchor" href="#formatdate" aria-hidden="true">#</a> formatDate</h4><p><strong>Version</strong>:</p><p>1.7.0</p><p><strong>Description</strong>:</p><p>Date format</p><p><strong>Type</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span> Date format
 * <span class="token keyword">@param</span> <span class="token parameter">date</span>
 * <span class="token keyword">@param</span> <span class="token parameter">format</span> Format string; YYYY year, MM month, DD day, hh hours, mm minutes, ss seconds, SSS milliseconds
 * <span class="token keyword">@param</span> [option] Configuration
 * <span class="token keyword">@param</span> [option.isPadStart=true] Whether to fill characters
 * <span class="token keyword">@param</span> [option.padSymbol=&#39;0&#39;] Fill character
 */</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>
  date<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> Date<span class="token punctuation">,</span>
  format<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  option<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    isPadStart<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    padSymbol<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> formatDate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@compass-aiden/utils&#39;</span><span class="token punctuation">;</span>

<span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns the current time in the format &#39;YYYY-MM-DD hh:mm:ss&#39;</span>
<span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token string">&#39;2020/03/12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Specifies the time string that can be processed by Date, in the format of &#39;YYYY-MM-DD hh:mm:ss&#39;</span>
<span class="token function">formatDate</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;YYYY/MM/DD&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Specifies a timestamp that can be processed by Date, in the format &#39;YYYY/MM/DD&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h3><h4 id="thememanager" tabindex="-1"><a class="header-anchor" href="#thememanager" aria-hidden="true">#</a> ThemeManager</h4><p><strong>Version</strong>:</p><p>1.6.2</p><p><strong>Description</strong>:</p><p>Theme Manager Based on CSS variables and DOM</p><p><strong>Type</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ThemeVariables</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">TMToggleCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span>themeName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> themeData<span class="token operator">:</span> ThemeVariables <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">TMConstructor</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span> Root node of topic variable mount
   * <span class="token keyword">@default</span> &#39;html&#39;
   * <span class="token keyword">@example</span>
   *   &#39;#id&#39;, &#39;.class&#39;, document.querySelector(&#39;.anyElement&#39;)
   */</span>
  root<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Element <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Common theme variables that will be inherited by each theme */</span>
  baseVariables<span class="token operator">?</span><span class="token operator">:</span> ThemeVariables<span class="token punctuation">;</span>
  hooks<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** Triggered after switching themes. When it is set to empty and no theme is applied, it is passed in (undefined, null) =&gt; void */</span>
    afterToggle<span class="token operator">?</span><span class="token operator">:</span> TMToggleCallback<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** Triggered after system theme changes */</span>
    afterSystemThemeChange<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>systemTheme<span class="token operator">:</span> <span class="token string">&#39;light&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;dark&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span> Whether to disable automatic follow of system theme if no theme is set or theme is default
   * <span class="token keyword">@todo</span> When the system theme is automatically followed, the theme data named light or dark is automatically applied. If it does not exist, the theme is not applied.
   */</span>
  disableFollowSystemTheme<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">ThemeManager</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** Current System theme */</span>
  systemTheme<span class="token operator">:</span> <span class="token string">&#39;light&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;dark&#39;</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>opt<span class="token operator">:</span> TMConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Register theme */</span>
  <span class="token function">register</span><span class="token punctuation">(</span>themeName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> themeData<span class="token operator">:</span> ThemeVariables<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Unregister theme */</span>
  <span class="token function">unregister</span><span class="token punctuation">(</span>themeName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Toggle theme */</span>
  <span class="token function">toggle</span><span class="token punctuation">(</span>themeName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Get current theme */</span>
  <span class="token function">getCurrentTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Get theme Data */</span>
  <span class="token function">getThemeData</span><span class="token punctuation">(</span>themeName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> ThemeVariables <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Unregister theme Data */</span>
  <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThemeManager</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  baseVariables<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;--scope-font-color&#39;</span><span class="token operator">:</span> <span class="token string">&#39;#212121&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// public variable of the declaration base, inherited by all registered subjects</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Theme Registration</span>
theme
  <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;light&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;--scope-page-background-color&#39;</span><span class="token operator">:</span> <span class="token string">&#39;#FFFFFF&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;dark&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;--scope-page-background-color&#39;</span><span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;--scope-font-color&#39;</span><span class="token operator">:</span> <span class="token string">&#39;#FFFFFF&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
theme<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">&#39;light&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Switch light theme</span>
theme<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Toggle to null, no theme applied, or specify &#39;default&#39; and automatically follow theme when the disable Follow System Theme is not used</span>
theme<span class="token punctuation">.</span><span class="token function">getCurrentTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Gets the currently used theme ID, for example: &#39;light&#39;</span>
theme<span class="token punctuation">.</span><span class="token function">getThemeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns data for the currently used theme</span>
theme<span class="token punctuation">.</span><span class="token function">getThemeData</span><span class="token punctuation">(</span><span class="token string">&#39;dark&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Gets the specified theme variable, and returns the data of the currently used theme by default if</span>
theme<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token string">&#39;purple&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Remove a registered topic</span>
theme<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Remove the theme manager and release the internal reference resources</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="logger" tabindex="-1"><a class="header-anchor" href="#logger" aria-hidden="true">#</a> Logger</h4><p><strong>Version</strong>:</p><p>1.7.0</p><p><strong>Description</strong>:</p><p>Logger</p><p><strong>Type</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/** Log Configuration Options */</span>
<span class="token keyword">interface</span> <span class="token class-name">LoggerOption</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** Business Domain Title */</span>
  subject<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Log output level, the lowest debug level, the highest error level, greater than or equal to the specified level will print the log */</span>
  logLevel<span class="token operator">:</span> <span class="token string">&#39;debug&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;log&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;info&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;success&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;warn&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Title Prefix */</span>
  prefix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Title Suffix */</span>
  suffix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Log Format String */</span>
  dateFormat<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Date digit filled with 0 */</span>
  isDatePadZero<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Log style */</span>
  styles<span class="token operator">:</span> <span class="token punctuation">{</span>
    debug<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    log<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    info<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    success<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    warn<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    error<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** The hook function after printing can be used to implement the log stack or write log files by node. */</span>
  afterPrintln<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span> Logger
 */</span>
<span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> config<span class="token operator">:</span> LoggerOption<span class="token punctuation">;</span>
  config<span class="token operator">:</span> LoggerOption<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token function">updateConfig</span><span class="token punctuation">(</span>option<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>LoggerOption<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">updateConfig</span><span class="token punctuation">(</span>option<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>LoggerOption<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">debug</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">info</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">success</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token function">warn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">warn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">error</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Logger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@compass-aiden/utils&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// Singleton pattern use</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Logger<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Default Configuration</span>
Logger<span class="token punctuation">.</span>config<span class="token punctuation">.</span>logLevel <span class="token operator">=</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Modify a single configuration</span>
Logger<span class="token punctuation">.</span><span class="token function">updateConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  logLevel<span class="token operator">:</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">,</span>
  dateFormat<span class="token operator">:</span> <span class="token string">&#39;YYYY-MM-DD hh:mm:ss:SSS&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Batch Modify Configuration</span>
Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Logger<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Multiple case mode usage</span>
<span class="token keyword">const</span> loggerMulti <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>loggerMulti<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Default Configuration</span>
loggerMulti<span class="token punctuation">.</span>config<span class="token punctuation">.</span>logLevel <span class="token operator">=</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Modify a single configuration</span>
loggerMulti<span class="token punctuation">.</span><span class="token function">updateConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  subject<span class="token operator">:</span> <span class="token string">&#39;Aiden2&#39;</span><span class="token punctuation">,</span>
  logLevel<span class="token operator">:</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">,</span>
  dateFormat<span class="token operator">:</span> <span class="token string">&#39;YYYY-MM-DD hh:mm:ss&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Batch Modify Configuration</span>
loggerMulti<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
loggerMulti<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
loggerMulti<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
loggerMulti<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
loggerMulti<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
loggerMulti<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util" tabindex="-1"><a class="header-anchor" href="#util" aria-hidden="true">#</a> Util</h3><h4 id="compareversion" tabindex="-1"><a class="header-anchor" href="#compareversion" aria-hidden="true">#</a> compareVersion</h4><p><strong>Version</strong>:</p><p>1.6.3</p><p><strong>Description</strong>:</p><p>Compare the size of two versions</p><p><strong>Type</strong>:</p><p><code>(currentVersion: string, comparedVersion: string, trimSymbolPattern?: RegExp): 1 | -1 | 0</code></p><ul><li>currentVersion Current version</li><li>comparedVersion Versions compared</li><li>trimSymbolPattern Optional. It is a regular expression. Qualifying characters are compared after they are removed. By default, the v character is matched.</li></ul><p>Return:</p><p>1 Greater than compare version;</p><p>-1 Less Than compare version;</p><p>0 Equal to compare version.</p><p><strong>Example</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> compareVersion <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@compass-aiden/utils&#39;</span><span class="token punctuation">;</span>

<span class="token function">compareVersion</span><span class="token punctuation">(</span><span class="token string">&#39;v1.0.0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2.0.0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; -1</span>
<span class="token function">compareVersion</span><span class="token punctuation">(</span><span class="token string">&#39;a2.0.0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B1.0.0&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a|b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 1</span>
<span class="token function">compareVersion</span><span class="token punctuation">(</span><span class="token string">&#39;v1.0.0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;V1.0.0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="downloadfile" tabindex="-1"><a class="header-anchor" href="#downloadfile" aria-hidden="true">#</a> downloadFile</h4><p><strong>Version</strong>:</p><p>1.6.3</p><p><strong>Description</strong>:</p><p>File download method</p><p><strong>Type</strong>:</p><p><code>(data: BlobPart, filename: string, blobOption: BlobPropertyBag): void</code></p><ul><li>data, Data that can be processed by a blob</li><li>filename, The specified file name</li><li>blobOption, Configuration options when blob processes data</li></ul><p><strong>Example</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">downloadFile</span><span class="token punctuation">(</span>excelData<span class="token punctuation">,</span> <span class="token string">&#39;example.xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h3><h4 id="version" tabindex="-1"><a class="header-anchor" href="#version" aria-hidden="true">#</a> VERSION</h4><p><strong>Version</strong>:</p><p>1.6.3</p><p><strong>Description</strong>:</p><p>Version of @compass-aiden/utils currently in use.</p><p><strong>Type</strong>:</p><p><code>string</code></p><p><strong>Example</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">VERSION</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@compass-aiden/utils&#39;</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Current utils version is %s&#39;</span><span class="token punctuation">,</span> <span class="token constant">VERSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,106),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","index.html.vue"]]);export{k as default};
